name: Terraform AWS Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Terraform
    environment: production
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Install PostgreSQL Client
        if: ${{ env.DESTROY == 'false' }}
        run: sudo apt-get update && sudo apt-get install -y postgresql-client jq

      - name: Get DB Credentials from Secrets Manager
        if: ${{ env.DESTROY == 'false' }}
        id: get-db-secret
        run: |
          secret=$(aws secretsmanager get-secret-value --secret-id dbcredentials-psql-cadastro-db --query SecretString --output text)
          echo "DB_HOST=$(echo $secret | jq -r .db_host)" >> $GITHUB_ENV
          echo "DB_PORT=$(echo $secret | jq -r .db_port)" >> $GITHUB_ENV
          echo "DB_NAME=$(echo $secret | jq -r .db_name)" >> $GITHUB_ENV
          echo "DB_USER=$(echo $secret | jq -r .db_user)" >> $GITHUB_ENV
          echo "DB_PASSWORD=$(echo $secret | jq -r .db_password)" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Run SQL initialization script
        if: ${{ env.DESTROY == 'false' }}
        run: |
          echo "Executando script SQL em $DB_HOST"
          PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -U $DB_USER -d $DB_NAME -p $DB_PORT -f sql/init.sql

      - name: Terraform Destroy
        if: ${{ env.DESTROY == 'true' }}
        run: terraform destroy -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
